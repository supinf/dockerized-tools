name: Publish Docker images

on:
  push:
    tags:
    - "*"

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  shellcheck:
    name: Shellcheck
    if: github.event_name == 'push' && contains(github.ref, 'gh-shellcheck-v0.7.')
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ghcr.io/supinf/shellcheck:0.7
    steps:
    - uses: actions/checkout@v2
    - name: Build & Push
      run: |
        echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker build -t "${IMAGE_NAME}" haskell/shellcheck/versions/0.x/
        docker push "${IMAGE_NAME}"

  hadolint:
    name: hadolint
    if: github.event_name == 'push' && contains(github.ref, 'gh-hadolint-v1.19.')
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ghcr.io/supinf/hadolint:1.19
    steps:
    - uses: actions/checkout@v2
    - name: Build & Push
      run: |
        echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker build -t "${IMAGE_NAME}" haskell/hadolint/versions/1.19/
        docker push "${IMAGE_NAME}"

  awscli-1-18:
    name: AWS CLI v1.18
    if: github.event_name == 'push' && contains(github.ref, 'gh-awscli-v1.18.')
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ghcr.io/supinf/awscli:1.18
    steps:
    - uses: actions/checkout@v2
    - name: Build & Push
      run: |
        echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker build -t "${IMAGE_NAME}" python/awscli/versions/1.18/
        docker push "${IMAGE_NAME}"

  awscli-2-1:
    name: AWS CLI v2.1
    if: github.event_name == 'push' && contains(github.ref, 'gh-awscli-v2.1.')
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ghcr.io/supinf/awscli:2.1
    steps:
    - uses: actions/checkout@v2
    - name: Build & Push
      run: |
        echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker build -t "${IMAGE_NAME}" python/awscli/versions/2.1/
        docker push "${IMAGE_NAME}"

  go-swagger:
    name: go-swagger
    if: github.event_name == 'push' && contains(github.ref, 'gh-go-swagger-v0.25.')
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ghcr.io/supinf/go-swagger:0.25
    steps:
    - uses: actions/checkout@v2
    - name: Build & Push
      run: |
        echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker build -t "${IMAGE_NAME}" golang/swagger/versions/0.x/
        docker push "${IMAGE_NAME}"

  hugo:
    name: Hugo
    if: github.event_name == 'push' && contains(github.ref, 'gh-hugo-v0.79.')
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ghcr.io/supinf/hugo:0.79
    steps:
    - uses: actions/checkout@v2
    - name: Build & Push
      run: |
        echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker build -t "${IMAGE_NAME}" golang/hugo/versions/0.x/
        docker push "${IMAGE_NAME}"

  cfn-lint:
    name: CFn Lint
    if: github.event_name == 'push' && contains(github.ref, 'gh-cfn-lint-v0.58.')
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ghcr.io/supinf/cfn-lint:0.58
    steps:
    - uses: actions/checkout@v2
    - name: Build & Push
      run: |
        echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker build -t "${IMAGE_NAME}" python/cfn-lint/versions/0.58/
        docker push "${IMAGE_NAME}"

  test-http:
    name: Test HTTP requests
    if: github.event_name == 'push' && contains(github.ref, 'gh-test-http-v1.2')
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ghcr.io/supinf/test-http:1.2
    steps:
    - uses: actions/checkout@v2
    - name: Build & Push
      run: |
        echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker build -t "${IMAGE_NAME}" python/test-http/versions/1.2/
        docker push "${IMAGE_NAME}"

  aws-x-ray:
    name: Test HTTP requests
    if: github.event_name == 'push' && contains(github.ref, 'gh-x-ray-3.2')
    runs-on: ubuntu-18.04
    env:
      IMAGE_NAME: ghcr.io/supinf/x-ray:3.2
    steps:
    - uses: actions/checkout@v2
    - name: Build & Push
      run: |
        echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u ${GITHUB_ACTOR} --password-stdin
        docker build -t "${IMAGE_NAME}" golang/x-ray/versions/3.2/
        docker push "${IMAGE_NAME}"
